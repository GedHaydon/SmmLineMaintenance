// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.eol.maintenance.domain;

import com.eol.maintenance.domain.SMMLine;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SMMLine_Roo_Finder {
    
    public static Long SMMLine.countFindSMMLinesByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = SMMLine.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SMMLine AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Long.class);
        q.setParameter("name", name);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SMMLine> SMMLine.findSMMLinesByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = SMMLine.entityManager();
        TypedQuery<SMMLine> q = em.createQuery("SELECT o FROM SMMLine AS o WHERE LOWER(o.name) LIKE LOWER(:name)", SMMLine.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<SMMLine> SMMLine.findSMMLinesByNameLike(String name, String sortFieldName, String sortOrder) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = SMMLine.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SMMLine AS o WHERE LOWER(o.name) LIKE LOWER(:name)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SMMLine> q = em.createQuery(queryBuilder.toString(), SMMLine.class);
        q.setParameter("name", name);
        return q;
    }
    
}
